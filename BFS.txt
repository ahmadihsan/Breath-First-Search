// Queue.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <ctime>
using namespace std;

struct node {
	int info;
	node *next;
};


class Queue {

private:
	node *front;
	node *rear;

public:

	Queue() {
		front = NULL;
		rear = NULL;
	}

	~Queue() {
		delete front;
	}

	void enqueue(int data) {
		node *temp = new node();
		temp->info = data;
		temp->next = NULL;
		if (front == NULL){
			front = temp;
		}
		else{
			rear->next = temp;
		}
		rear = temp;
	}
	
	bool isEmpty() 
	{
		return (front == NULL);
	}

	int dequeue() {
		node *temp = new node();
		int value;
		if (front == NULL){
			cout << "\nEmpty Queue\n";
		}
		else{
			temp = front;
			value = temp->info;
			front = front->next;
			delete temp;
		}
		return value;
	}

	void display(){
		node *p = new node;
		p = front;
		if (front == NULL)
		{
			cout << "\nEmpty\n";
		}
		else{
			while (p != NULL)
			{
				cout << endl << p->info;
				p = p->next;
			}
		}
	}


};

class Graph_BFS {
private:
	int n; /// n is the number of vertices in the graph
	int **A; /// A stores the edges between two vertices
public:

	Graph_BFS(int size=2) {
		int i, j;
		if (size < 2)
			n = 2;
		else
			n = size;
		A = new int*[n];
		for (i = 0; i < n; ++i)
			A[i] = new int[n];
		for (i = 0; i < n; ++i)
			for (j = 0; j < n; ++j)
				A[i][j] = 0;
	}
	
	~Graph_BFS() {
		for (int i = 0; i < n; ++i)
			delete[] A[i];
		delete[] A;
	}

	bool isConnected(int u, int v) {
		return (A[u - 1][v - 1] == 1);
	}

	void addEdge(int u, int v) {
		A[u - 1][v - 1] = A[v - 1][u - 1] = 1;
	}

	void BFS(int s) {
		Queue que;
		bool *exp = new bool[n + 1];
		for (int i = 1; i <= n; ++i)
			exp[i] = false;
		que.enqueue(s);
		exp[s] = true; 
		
		while (!que.isEmpty()) {
			int v = que.dequeue();
			cout << v << "\n\n";
			for (int w = 1; w <= n; ++w)
				if (isConnected(v, w) && !exp[w]) {
				que.enqueue(w);
				exp[w] = true;
				}
		}
		cout << endl;
		delete[] exp;
	}

};


int main() {
	
	Graph_BFS gra(6);
	int bfs;
	gra.addEdge(1, 2);
	gra.addEdge(1, 3);
	gra.addEdge(3, 4);
	gra.addEdge(3, 5);
	gra.addEdge(2, 4);
	gra.addEdge(5, 6);
	gra.addEdge(4, 6);
	cout << "Enter starting Node : ";
	cin >> bfs;
	gra.BFS(bfs);
	system("pause");

}



